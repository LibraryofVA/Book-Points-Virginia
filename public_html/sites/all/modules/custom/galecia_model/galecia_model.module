<?php 

/**
* Implements hook_menu().
*/

function galecia_model_user_delete ($account) {

	$uid=$account->uid;

	$readers=entity_load('reader');

	$user_readers=array();

	foreach($readers as $key => $value) {

		if($value->uid == $uid) {

			$user_readers[]=$value->id;
		}
	}

	if(!empty($user_readers)) {

	entity_delete_multiple('reader', $user_readers);

	}

	$reading_logs=entity_load('reading_log');

	$user_logs=array();

	foreach($reading_logs as $key => $value) {
		if($value->uid == $uid) {

			$user_logs[]=$value->id;
		}
	}

	if(!empty($user_logs)) {

	entity_delete_multiple('reading_log', $user_logs);

	}

	$points=entity_load("points");

	$user_points=array();

	foreach($points as $key => $value) {
		if($value->uid == $uid) {

			$user_points[]=$value->id;
		}
	}

	if(!empty($user_points)) {

	entity_delete_multiple('points', $user_points);

	}

	$reader_prizes=entity_load("reader_prize");

	$user_prizes=array();

	foreach($reader_prizes as $key => $value) {
		if($value->uid == $uid) {

			$user_prizes[]=$value->id;
		}
	}

	if(!empty($user_prizes)) {

	entity_delete_multiple('reader_prize', $user_prizes);

	}

	$reader_badges=entity_load("reader_badge");

	$user_badges=array();

	foreach($reader_badges as $key => $value) {
		if($value->uid == $uid) {

			$user_badges[]=$value->id;
		}
	}

	if(!empty($user_badges)) {

	entity_delete_multiple('reader_badge', $user_badges);

	}

	$reader_tickets=entity_load("reader_ticket");

	$user_tickets=array();

	foreach($reader_tickets as $key => $value) {
		if($value->uid == $uid) {

			$user_tickets[]=$value->id;
		}
	}

	if(!empty($user_tickets)) {

	entity_delete_multiple('reader_ticket', $user_tickets);

	}

}


// function galecia_model_user_cancel ($edit, $account, $method) {

// 	dsm($edit);

// 	dsm($account);

// 	dsm($method);
// }



function galecia_model_entity_presave($entity, $type) {

	global $user;

	if ($type=='activity_log') {

		if (!empty($entity->field_reader_badge)){
			$badge_id=$entity->field_reader_badge['und'][0]['target_id'];

			$reader_badge_type = 'reader_badge';

			$reader=$entity->field_readers['und'][0]['target_id'];

			    	$loaded_badge = entity_load_single('badge' , $badge_id);
			    	$badge_text = $loaded_badge->field_badge_message['und'][0]['value'];
			  		$reader_badge = entity_create($reader_badge_type, array('type' => 'reader_badge'));
			  		$wrapper = entity_metadata_wrapper($reader_badge_type, $reader_badge);
			  		$wrapper->field_readers = array($reader);
			  		$wrapper->field_reader_badge = $badge_id;
			  		$wrapper->field_badge_message = $badge_text;
			  		$wrapper->save();
		 }


		 if (!empty($entity->field_points_earned)){

			$points_type = 'points';

			$reader=$entity->field_readers['und'][0]['target_id'];

			$loaded_reader=entity_load_single('reader', $reader);
			   
			  		$reader_points = entity_create($points_type, array('type' => 'points'));
			  		$wrapper = entity_metadata_wrapper($points_type, $reader_points);
			  		$wrapper->field_readers = array($reader);
			  		$wrapper->field_points = $entity->field_points_earned['und'][0]['value'];
			  		$wrapper->field_program_reference = array($loaded_reader->field_program['und'][0]['target_id']);
			  		
			  		$wrapper->save();
		 }

	}



	if (is_array($user->roles) && in_array('Library', array_values($user->roles))) {


	if (in_array("Library", $user->roles)) {


		if ($type=='reading_log') {


			$reader=entity_load_single('reader', $entity->field_readers['und'][0]['target_id']);

			$new_uid=$reader->field_parent_uid['und'][0]['target_id'];

			$wrapper = entity_metadata_wrapper($type, $entity);
			$wrapper->uid->set($new_uid); 

		}

		if ($type=='points') {


			$reader_p=entity_load_single('reader', $entity->field_readers['und'][0]['target_id']);

			$new_uid_p=$reader_p->field_parent_uid['und'][0]['target_id'];

			$wrapper_p = entity_metadata_wrapper($type, $entity);
			$wrapper_p->uid->set($new_uid_p); 


		}

		if ($type=='reader_prize') {

			$reader_rp=entity_load_single('reader', $entity->field_readers['und'][0]['target_id']);

			$new_uid_rp=$reader_rp->field_parent_uid['und'][0]['target_id'];

			$wrapper_rp = entity_metadata_wrapper($type, $entity);
			$wrapper_rp->uid->set($new_uid_rp); 


		}

		if ($type=='reader_ticket') {


			$reader_rt=entity_load_single('reader', $entity->field_readers['und'][0]['target_id']);

			$new_uid_rt=$reader_rt->field_parent_uid['und'][0]['target_id'];

			$wrapper_rt = entity_metadata_wrapper($type, $entity);
			$wrapper_rt->uid->set($new_uid_rt); 

		}

		if ($type=='reader_badge') {


			$reader_rb=entity_load_single('reader', $entity->field_readers['und'][0]['target_id']);

			$new_uid_rb=$reader_rb->field_parent_uid['und'][0]['target_id'];

			$wrapper_rb = entity_metadata_wrapper($type, $entity);
			$wrapper_rb->uid->set($new_uid_rb); 

		}

		if ($type=='activity_log') {


			$reader_al=entity_load_single('reader', $entity->field_readers['und'][0]['target_id']);

			$new_uid_al=$reader_al->field_parent_uid['und'][0]['target_id'];

			$wrapper_al = entity_metadata_wrapper($type, $entity);
			$wrapper_al->uid->set($new_uid_rb); 

		}
	}
	}

}


function galecia_model_entity_update($entity, $type) {
	if ($type === 'reading_log' && $entity->type === 'reading_log' && (!empty($entity->field_points_reference))) {


		$mydate=getdate(date("U"));
		$current_date="$mydate[weekday], $mydate[month] $mydate[mday], $mydate[year]";

		$reader_ref=$entity->field_readers['und'][0]['target_id'];

		$reader=entity_load_single('reader', $reader_ref);


		$reader_fname=$reader->field_first_name['und'][0]['value'];

		$reader_lname=$reader->field_last_name['und'][0]['value'];

		$current_level=$reader->field_current_level['und'][0]['target_id'];
		$new_level=$current_level;
       $current_points=$reader->field_current_points['und'][0]['value'];
       $current_program=$reader->field_program['und'][0]['target_id'];

       // $loaded_program= $level=entity_load_single('program', $current_program);


        $level=entity_load('level');

        $matching_levels=array();


        foreach ($level as $key => $value) {
            if ($value->field_program_reference['und'][0]['target_id'] == $current_program) {

                $matching_levels[]=$value;
            }
        }

        if(!empty($matching_levels)) {

        $first_level=array_shift($matching_levels);

        $new_matching_levels=$matching_levels;

        foreach($new_matching_levels as $key=>$value) {
        	if ($current_points>=$value->field_point_threshold['und'][0]['value']){
        		$new_level=$value->id;

        	}

		    	$level_check=$reader->field_current_level['und'][0]['target_id'];

		    	$updated_level=$new_level;


		    	if($updated_level > $level_check) {



		    	$loaded_level=entity_load_single('level', $updated_level);



		    	if(!empty($loaded_level->field_prize_reference['und'][0]['target_id'])){


		    	$prize=entity_load_single('prize', $loaded_level->field_prize_reference['und'][0]['target_id']);

		    	$prize_reference=$loaded_level->field_prize_reference['und'][0]['target_id'];

		    	

		    	$prize_name=$prize->title;
		    	$prize_status= t('Unclaimed');
		    	$prize_id=$prize->id;
		    	$prize_program=array($loaded_level->field_program_reference['und'][0]['target_id']);
		    	$prize_level=array($loaded_level);


		    	$reader_prize_type = 'reader_prize';

		    	$loaded_prize = entity_load_single('prize' , $prize_id);
		    	$prize_text = $loaded_prize->field_prize_message['und'][0]['value'];

		  		$reader_prize = entity_create($reader_prize_type, array('type' => 'reader_prize'));
		  		$wrapper = entity_metadata_wrapper($reader_prize_type, $reader_prize);
		  		$wrapper->title = $prize_name . t(' for ') . $reader_fname . " " . $reader_lname;
		  		$wrapper->field_status = $prize_status;
		  		$wrapper->field_readers = array($reader->id);
		  		$wrapper->field_program_reference = $prize_program;
		  		$wrapper->field_level = $prize_level;
		  		$wrapper->field_prize_reference = $prize_reference;
		  		$wrapper->field_prize_message = $prize_text;
		  		$wrapper->save();

		  		}

		  		if(!empty($loaded_level->field_reader_badge['und'][0]['target_id'])){


		    	$level_badge=$loaded_level->field_reader_badge['und'][0]['target_id'];
		    	
		    	$reader_badge_type = 'reader_badge';

		    	$loaded_badge = entity_load_single('badge' , $level_badge);
		    	$badge_text = $loaded_badge->field_badge_message['und'][0]['value'];
		  		$reader_badge = entity_create($reader_badge_type, array('type' => 'reader_badge'));
		  		$wrapper = entity_metadata_wrapper($reader_badge_type, $reader_badge);
		  		$wrapper->field_readers = array($reader->id);
		  		$wrapper->field_reader_badge = $level_badge;
		  		$wrapper->field_badge_message = $badge_text;
		  		$wrapper->save();

		  		}

		  		if(!empty($loaded_level->field_drawing_tickets)) {

		    	$level_tickets=$loaded_level->field_drawing_tickets['und'][0]['value'];
		    	}

		    	else {
		    		$level_tickets=0;
		    	}

			    	for($i=1; $i <= $level_tickets; $i++) {

			    	$reader_ticket_type = 'reader_ticket';
			  		$reader_ticket = entity_create($reader_ticket_type, array('type' => 'reader_ticket'));
			  		$wrapper = entity_metadata_wrapper($reader_ticket_type, $reader_ticket);
			  		$wrapper->field_readers = array($reader->id);
			  		$wrapper->title = t('Drawing Ticket ') . $i . t(' on ') . $current_date . t(' for ') . $reader_fname . " " . $reader_lname;
			  		$wrapper->field_readers = array($reader->id);
			  		$wrapper->field_level = $prize_level;
			  		$wrapper->field_ticket_status = t('Not Drawn');
			  		$wrapper->save();

		  			}


		  			if($reader->field_current_level['und'][0]['target_id']<$updated_level) {

		  				$reader->field_current_level['und'][0]['target_id']=$updated_level;

		        		entity_save('reader', $reader);
		        	}
		        }
		}

    		}

	}
}

function galecia_model_menu() {
 
  $items['claim/%/prize'] = array(
    'title' => t('Claim Prize'),
    'page callback' => 'claim_prize',
    'access arguments' => array('access content'),
  );

    $items['unclaim/%/prize'] = array(
    'title' => t('Unclaim Prize'),
    'page callback' => 'unclaim_prize',
    'access arguments' => array('access content'),
  );

    $items['activity/log/claim/%/%'] = array(
    'page callback' => 'galecia_model_create_activity_log', // Render HTML.
    'page arguments' => array(3,4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'galecia_model_create_activity_log_callback', 
  );

  return $items;
}

function claim_prize() {

	$prize=arg(1);

	$prize_entity=entity_load_single('reader_prize', $prize);

	$output ='';
	$output .="<div class=\"panel\" id=\"prize_claimed\">" . t(" Prize Claimed ") . $prize_entity->title . "</div>";

	$output .="<a href='/library/dashboard/readers/reader_overview/" . $prize_entity->field_readers['und'][0]['target_id'] . t("'> Back to Reader's Page");


	$prize_entity->field_status['und'][0]['value'] = t('Claimed');

	entity_save('reader_prize', $prize_entity);

	return $output;

}

function unclaim_prize() {

	$prize=arg(1);

	$prize_entity=entity_load_single('reader_prize', $prize);

	$output ='';
	$output .="<div class=\"panel\" id=\"prize_unclaimed\">" . t(" Prize Unclaimed ") . $prize_entity->title . "</div>";

	$output .="<a href='/library/dashboard/readers/reader_overview/" . $prize_entity->field_readers['und'][0]['target_id'] . "'> " . t("Back to Reader's Page") . "</a>";

	$prize_entity->field_status['und'][0]['value'] = t('Unclaimed');

	entity_save('reader_prize', $prize_entity);

	return $output;



}

function galecia_model_form_alter (&$form, &$form_state, $form_id) {

	if ($form_id=='eck__entity__form_add_program_program'){
		$form['field_scoring_type']['#disabled'] = TRUE;
    	$form['field_scoring_type']['#type'] = 'hidden';
    	$form['#validate'][] = 'galecia_model_custom_validate';
	}

	if ($form_id=='eck__entity__form_add_level_level') {
		$arg=arg(5);

		

		if(!empty($arg)) {

			$program=entity_load_single('program', $arg);

			$form['field_program_reference']['#disabled'] = TRUE;
    		$form['field_program_reference']['#type'] = 'hidden';
    		$form['field_program_reference']['und']['#default_value'] = $program->title . " (". $arg. ")";
		}

	}

}

function galecia_model_custom_validate ($form, &$form_state) {

	if ($form_state['values']['field_per_unit_label']['und'][0]['value'] != 'Book') {
		$form_state['values']['field_scoring_type']['und'][0]['value'] = 'Points Per Unit';
	}

}

function galecia_model_create_activity_log ($reader, $activity) {

	global $user;


    $reader_id=$reader;

    $readers=entity_load_single('reader', $reader_id);

    $code_id=$activity;

    $loaded_code=entity_load_single('activity', $code_id);

    $activity_log = entity_create('activity_log', array('type' => 'activity_log'));

    $activity_points=(int)$loaded_code->field_activity_points['und'][0]['value'];

    $wrapper = entity_metadata_wrapper('activity_log', $activity_log);
                $wrapper->uid = $user->uid;
                $wrapper->title = $loaded_code->title . ' activity claim' . $reader_id;

                $wrapper->field_readers = array($reader_id);
                $wrapper->field_activity_reference = $code_id;

                if(!empty($loaded_code->field_activity_points)) {
                    $wrapper->field_points_earned = $activity_points;
                }
                if(!empty($loaded_code->field_reader_badge)) {
                    $wrapper->field_reader_badge = $loaded_code->field_reader_badge['und'][0]['target_id'];
                }

                $wrapper->save();


                $readers->field_claimed_activities['und'][]['target_id']=(array)$code_id;

                     entity_save('reader', $readers);

                     drupal_set_message(t('You added an activity!'));
}

function galecia_model_create_activity_log_callback($page_callback_result){

	return "<h3>Success</h3>";
}


 ?>




